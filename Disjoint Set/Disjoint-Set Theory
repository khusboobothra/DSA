A disjoint set is data-structure that keeps tracks of a set of elements partitioned into several disjoint subsetss(non-overlapping subsets).

It is also called as a union-find data structureas it supports union and find operation on subsets.

Find operation : It follows the parent nodes until root node is reached.

Union operation : It combines two treesinto one by attaching one tree's node into the root of another.

The efficient implementation of disjoint set is done by :
1.Union By Rank
2.Path Compression

Time complexity : The tcs of both these operations is nearly 4-alpha(where alpha is a constant nearly equal to 1)

Code Implementation :

int parent[100000];
int rank[100000];

void makeSet()
{
    for(int i=0;i<=N;i++)
    {
        parent[i]=i;
        rank[i]=0;
    }
}

int findPar(int node)
{
    if(node==parent[node])
    return node;

    return parent[node]=findPar(parent[node]);
}

void Union(int u,int v)
{
    u=findPar(u);
    v=findPar(v);

    if(rank[u]<rank[v])
    {
        parent[u]=v;
    }
    else if(rank[u]>rank[v])
    {
        parent[v]=u;
    }
    else
    {
        rank[u]++;
        parent[v]=u;
    }
}

void main()
{
    int m;
    makeSet();
    cin>>m;
    while(m--)
    {
        int u,v;
        Union(u,v);
    }
}


























